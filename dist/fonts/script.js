import"./style.css";import*as THREE from"three";import{LoadingManager,Mesh}from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"dat.gui";const scene=new THREE.Scene,gui=new dat.GUI,sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))})),console.log(window.devicePixelRatio),window.addEventListener("dblclick",(()=>{document.fullscreenElement?document.exitFullscreen():canva.requestFullscreen()}));const loadingManager=new THREE.LoadingManager;loadingManager.onStart=()=>{},loadingManager.onLoad=()=>{},loadingManager.onProgress=()=>{},loadingManager.onError=()=>{};const textureLoader=new THREE.TextureLoader(loadingManager),cubeTextureLoader=new THREE.CubeTextureLoader,texture=textureLoader.load("/textures/door/color.jpg"),ao=textureLoader.load("/textures/door/ambientOcclusion.jpg"),dispMap=textureLoader.load("/textures/door/height.jpg"),metalness=textureLoader.load("/textures/door/metalness.jpg"),roughnes=textureLoader.load("/textures/door/roughness.jpg"),normal=textureLoader.load("/textures/door/normal.jpg"),alpha=textureLoader.load("/textures/door/alpha.jpg"),envmap=cubeTextureLoader.load(["/textures/environmentMaps/2/px.jpg","/textures/environmentMaps/2/nx.jpg","/textures/environmentMaps/2/py.jpg","/textures/environmentMaps/2/ny.jpg","/textures/environmentMaps/2/pz.jpg","/textures/environmentMaps/2/nz.jpg"]),ambientLight=new THREE.AmbientLight(16777215,.5),pointLight=new THREE.PointLight(16777215,.5);pointLight.position.set(1,2,3),scene.add(ambientLight,pointLight);const canva=document.querySelector(".webgl"),geometry=new THREE.BoxGeometry(1,1,1),material=new THREE.MeshBasicMaterial,cube=new THREE.Mesh(geometry,material);scene.add(cube);const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.z=3,scene.add(camera);const renderer=new THREE.WebGLRenderer({canvas:canva});renderer.setSize(sizes.width,sizes.height);const clock=new THREE.Clock,controls=new OrbitControls(camera,canva);function animate(){requestAnimationFrame(animate),renderer.render(scene,camera),controls.update()}controls.enableDamping=!0,animate();